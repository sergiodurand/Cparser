/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. C2BSVParser.jj */
/*@egen*/options {
	STATIC = false;
	DEBUG_PARSER = false;
	DEBUG_TOKEN_MANAGER = false;
	           
	                       
	                                  
	                
	                        
	JDK_VERSION = "1.5";
	JAVA_UNICODE_ESCAPE = true;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(C2BSVParser)
package lcr.c2bsv.parser;
 
import java.util.*;
import java.io.*;


public class C2BSVParser/*@bgen(jjtree)*/implements C2BSVParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTC2BSVParserState jjtree = new JJTC2BSVParserState();

/*@egen*/

	public static void main (String args []) throws ParseException, FileNotFoundException {
		C2BSVParser parser ;

		if(args.length == 1) {
			try {
        		parser = new C2BSVParser(new java.io.FileInputStream(args[0]));
      		} catch(java.io.FileNotFoundException e){
        		System.out.println("C2BSV:  File " + args[0] + " not found.");
		        return ;
	        }
		} else {
        	System.out.println("C2BSV:  Usage is java C2BSV inputfile");
        	return ;
      	}

      	try {
        	SimpleNode root = parser.TranslationUnit();
			//root.dump("");
        	System.out.println(root.toBSV());

        } catch(ParseException e) {
        	System.out.println("C2BSV:  Encountered errors during parse.");
        	e.printStackTrace();
      	}
	}
}

PARSER_END(C2BSVParser)

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
| "#" : PREPROCESSOR_OUTPUT
}

<PREPROCESSOR_OUTPUT> SKIP:
{
     "\n" : DEFAULT
}

<PREPROCESSOR_OUTPUT> MORE:
{
 "\\\n"
 |
 "\\\r\n"
 |
 < ~[] >
}



TOKEN : {
 <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
//|  <CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
|  <STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
}

TOKEN : {
	<RETURN: "return"> |
	<STRUCT: "struct"> |
	<WHILE: "while"> |
	<FLOAT: "float"> |
	<ELSE: "else"> |
	<VOID: "void"> |
	<INT: "int"> |
	<IF: "if">
}

TOKEN : {
 <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|  <#LETTER: ["$","A"-"Z","_","a"-"z"]>
|  <#DIGIT: ["0"-"9"]>
|  <SEMICOLON: ";">
}

SimpleNode TranslationUnit()            :
{/*@bgen(jjtree) #root( true) */
  ASTroot jjtn000 = new ASTroot(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #root( true) */
        try {
/*@egen*/
	try{
		(ExternalDeclaration())+              //<EOF> 
	}catch (ParseException e) {
                System.err.println(e.toString());
                Token token = getNextToken(); 
	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000,  true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  true);
          }
        }
/*@egen*/
}

void ExternalDeclaration():
{}
{
	try{
		//( LOOKAHEAD( FunctionDefinition() ) FunctionDefinition() | Declaration())
		(LOOKAHEAD(StatementList()) StatementList() | Declaration())
      } catch(ParseException e) {
                System.err.println(e.toString());
                Token t = getNextToken(); 
                while(!(t.kind!=SEMICOLON && t.kind!=EOF))
                        t=getNextToken(); 
        }
}

void FunctionDefinition()                          :
{/*@bgen(jjtree) #FunctionDefinition( true) */
  ASTFunctionDefinition jjtn000 = new ASTFunctionDefinition(JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #FunctionDefinition( true) */
        try {
/*@egen*//*@bgen(jjtree) #FunctionReturn( 1) */
        {
          ASTFunctionReturn jjtn001 = new ASTFunctionReturn(JJTFUNCTIONRETURN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	[LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers()]/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
/*@egen*/                   /*@bgen(jjtree) FunctionHeader */
                                                                                        {
                                                                                          ASTFunctionHeader jjtn002 = new ASTFunctionHeader(JJTFUNCTIONHEADER);
                                                                                          boolean jjtc002 = true;
                                                                                          jjtree.openNodeScope(jjtn002);
                                                                                        }
                                                                                        try {
/*@egen*/ Declarator()/*@bgen(jjtree)*/
                                                                                        } catch (Throwable jjte002) {
                                                                                          if (jjtc002) {
                                                                                            jjtree.clearNodeScope(jjtn002);
                                                                                            jjtc002 = false;
                                                                                          } else {
                                                                                            jjtree.popNode();
                                                                                          }
                                                                                          if (jjte002 instanceof RuntimeException) {
                                                                                            throw (RuntimeException)jjte002;
                                                                                          }
                                                                                          if (jjte002 instanceof ParseException) {
                                                                                            throw (ParseException)jjte002;
                                                                                          }
                                                                                          throw (Error)jjte002;
                                                                                        } finally {
                                                                                          if (jjtc002) {
                                                                                            jjtree.closeNodeScope(jjtn002, true);
                                                                                          }
                                                                                        }
/*@egen*/                 
	[ DeclarationList() ]/*@bgen(jjtree) #FunctionBody(> 0) */
                              {
                                ASTFunctionBody jjtn003 = new ASTFunctionBody(JJTFUNCTIONBODY);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
                              }
                              try {
/*@egen*/ CompoundStatement()/*@bgen(jjtree)*/
                              } catch (Throwable jjte003) {
                                if (jjtc003) {
                                  jjtree.clearNodeScope(jjtn003);
                                  jjtc003 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte003 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte003;
                                }
                                if (jjte003 instanceof ParseException) {
                                  throw (ParseException)jjte003;
                                }
                                throw (Error)jjte003;
                              } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 0);
                                }
                              }
/*@egen*/                  /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  true);
          }
        }
/*@egen*/
}

void Declaration()                   :
{/*@bgen(jjtree) #Declaration( true) */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Declaration( true) */
        try {
/*@egen*/
	DeclarationSpecifiers() [ InitDeclaratorList() ] ";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  true);
          }
        }
/*@egen*/
}

void DeclarationList():
{}
{
	( LOOKAHEAD(Declaration()) Declaration() )+
}

void DeclarationSpecifiers():
{}
{
	  TypeSpecifier()  [ LOOKAHEAD(DeclarationSpecifiers()) DeclarationSpecifiers() ]
}

void TypeSpecifier()      :
{/*@bgen(jjtree) Type */
 ASTType jjtn000 = new ASTType(JJTTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	( t = <VOID>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.jjtSetValue(t.image);} 
	| t = <INT>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.jjtSetValue(t.image);} 
	| t = <FLOAT>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.jjtSetValue(t.image);} 
	| StructSpecifier()/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {jjtn000.jjtSetValue("Struct");})/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void StructSpecifier():
{Token t;}
{
	( <STRUCT> )( LOOKAHEAD(3) [ ( t = <IDENTIFIER>/*@bgen(jjtree) StructName */
                                                         {
                                                           ASTStructName jjtn001 = new ASTStructName(JJTSTRUCTNAME);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
                                                         }
                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn001, true);
                                                           jjtc001 = false;
                                                         }
/*@egen*/  {jjtn001.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                         } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001, true);
                                                           }
                                                         }
/*@egen*/             ) ]
	"{" StructDeclarationList() "}" 
	| t = <IDENTIFIER>/*@bgen(jjtree) StructName */
                           {
                             ASTStructName jjtn002 = new ASTStructName(JJTSTRUCTNAME);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn002, true);
                             jjtc002 = false;
                           }
/*@egen*/ {jjtn002.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                             }
                           }
/*@egen*/             )
}

void StructDeclarationList()            :
{/*@bgen(jjtree) StructBody */
  ASTStructBody jjtn000 = new ASTStructBody(JJTSTRUCTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StructBody */
        try {
/*@egen*/
	(/*@bgen(jjtree) #Declaration(> 0) */
         {
           ASTDeclaration jjtn001 = new ASTDeclaration(JJTDECLARATION);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/StructDeclaration()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 0);
           }
         }
/*@egen*/                 )+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void InitDeclaratorList():
{}
{
	InitDeclarator() (","/*@bgen(jjtree) #ListOfDeclarations( 2) */
                              {
                                ASTListOfDeclarations jjtn001 = new ASTListOfDeclarations(JJTLISTOFDECLARATIONS);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ InitDeclarator()/*@bgen(jjtree)*/
                              } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte001;
                                }
                                if (jjte001 instanceof ParseException) {
                                  throw (ParseException)jjte001;
                                }
                                throw (Error)jjte001;
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
                              }
/*@egen*/                       )*
}

void InitDeclarator():
{}
{
	Declarator() [ "="/*@bgen(jjtree) #InitializedAs(> 0) */
                           {
                             ASTInitializedAs jjtn001 = new ASTInitializedAs(JJTINITIALIZEDAS);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*/ Initializer()/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 0);
                             }
                           }
/*@egen*/                   ]
}

void StructDeclaration():
{}
{
	SpecifierQualifierList() StructDeclaratorList() ";"
}

void SpecifierQualifierList():
{}
{
	TypeSpecifier() [ LOOKAHEAD(SpecifierQualifierList()) SpecifierQualifierList() ]
}

void StructDeclaratorList():
{}
{
	StructDeclarator() ( ","/*@bgen(jjtree) #StructsList( 2) */
                                 {
                                   ASTStructsList jjtn001 = new ASTStructsList(JJTSTRUCTSLIST);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*/ StructDeclarator()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte001;
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     throw (ParseException)jjte001;
                                   }
                                   throw (Error)jjte001;
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                   }
                                 }
/*@egen*/                )*
}

void StructDeclarator():
{}
{
	( LOOKAHEAD(3) Declarator() | [ Declarator() ] ":" ConstantExpression() )
}

void Declarator():
{}
{
	DirectDeclarator()
}

void DirectDeclarator():
{ Token t;}
{
	( t = <IDENTIFIER>/*@bgen(jjtree) Identifier */
                           {
                             ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                           }
/*@egen*/ { jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                             }
                           }
/*@egen*/             | "(" Declarator() ")" )
	([LOOKAHEAD(2) ( "[" ConstantExpression()/*@bgen(jjtree) #Array( 2) */
                                                  {
                                                    ASTArray jjtn002 = new ASTArray(JJTARRAY);
                                                    boolean jjtc002 = true;
                                                    jjtree.openNodeScope(jjtn002);
                                                  }
                                                  try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                                                  } finally {
                                                    if (jjtc002) {
                                                      jjtree.closeNodeScope(jjtn002,  2);
                                                    }
                                                  }
/*@egen*/          ) | ("["/*@bgen(jjtree) #Array( 1) */
                                                                        {
                                                                          ASTArray jjtn003 = new ASTArray(JJTARRAY);
                                                                          boolean jjtc003 = true;
                                                                          jjtree.openNodeScope(jjtn003);
                                                                        }
                                                                        try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                                                                        } finally {
                                                                          if (jjtc003) {
                                                                            jjtree.closeNodeScope(jjtn003,  1);
                                                                          }
                                                                        }
/*@egen*/          )])
	( LOOKAHEAD(3) "(" ParameterTypeList() ")" | "(" [ IdentifierList() ] ")" )* 
}

void ParameterTypeList()                       :
{/*@bgen(jjtree) #ListOfArguments( true) */
  ASTListOfArguments jjtn000 = new ASTListOfArguments(JJTLISTOFARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ListOfArguments( true) */
        try {
/*@egen*/
	ParameterList() ["," "..." ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  true);
          }
        }
/*@egen*/
}

void ParameterList():
{}
{
	ParameterDeclaration() (LOOKAHEAD(2) "," ParameterDeclaration())*
}

void ParameterDeclaration()                 :
{/*@bgen(jjtree) #Parameter( true) */
  ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Parameter( true) */
        try {
/*@egen*/
	DeclarationSpecifiers() ( LOOKAHEAD(Declarator()) Declarator() | [ AbstractDeclarator() ] )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  true);
          }
        }
/*@egen*/
}

void IdentifierList():
{Token t1,t2;}
{
	( t1 = <IDENTIFIER>/*@bgen(jjtree) Identifier */
                            {
                              ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtc001 = false;
                            }
/*@egen*/ { jjtn001.jjtSetValue(t1.image); }/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
                            }
/*@egen*/             )
	(","/*@bgen(jjtree) #ListOfIdentifiers( 2) */
             {
               ASTListOfIdentifiers jjtn003 = new ASTListOfIdentifiers(JJTLISTOFIDENTIFIERS);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
             }
             try {
/*@egen*/ (t2 = <IDENTIFIER>/*@bgen(jjtree) Identifier */
                                {
                                  ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn002, true);
                                  jjtc002 = false;
                                }
/*@egen*/ { jjtn002.jjtSetValue(t2.image); }/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                  }
                                }
/*@egen*/            )/*@bgen(jjtree)*/
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
               }
             }
/*@egen*/                       )*
}

void Initializer():
{}
{
	( AssignmentExpression() | "{" InitializerList() [","] "}" )
}

void InitializerList():
{}
{
	Initializer() (LOOKAHEAD(2) "," Initializer())*
}

void TypeName():
{}
{
	SpecifierQualifierList() [ AbstractDeclarator() ]
}

void AbstractDeclarator():
{}
{
	( DirectAbstractDeclarator() )
}

void DirectAbstractDeclarator():
{}
{
	( LOOKAHEAD(2) "(" AbstractDeclarator() ")" 
				| "[" [ConstantExpression()] "]"
				| "(" [ParameterTypeList()] ")" )
					( "[" [ ConstantExpression() ] "]" 
					| "(" [ ParameterTypeList() ] ")" )*
}

void Statement()                 :
{/*@bgen(jjtree) #Statement( true) */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Statement( true) */
        try {
/*@egen*/
	( ExpressionStatement() |
	  CompoundStatement() |
	  SelectionStatement() |
	  IterationStatement() |
	  JumpStatement() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  true);
          }
        }
/*@egen*/
}

void ExpressionStatement():
{}
{
	[ Expression() ] ";"
}

void CompoundStatement():
{}
{
	"{" [ LOOKAHEAD(DeclarationList()) DeclarationList() ] [ StatementList() ] "}"
}

void StatementList():
{}
{
	//(Statement())+    // I have to solve this grammar conflict (12/May/2012)
	( ExpressionStatement() |
	  CompoundStatement() |
	  SelectionStatement() |
	  IterationStatement() |
	  JumpStatement() )+	
}
 
void SelectionStatement()        :
{/*@bgen(jjtree) #If(> 1) */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #If(> 1) */
        try {
/*@egen*/
	( <IF> "(" Expression()/*@bgen(jjtree) #Condition( 1) */
                                {
                                  ASTCondition jjtn001 = new ASTCondition(JJTCONDITION);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  1);
                                  }
                                }
/*@egen*/              /*@bgen(jjtree) #Then( true) */
                                                  {
                                                    ASTThen jjtn002 = new ASTThen(JJTTHEN);
                                                    boolean jjtc002 = true;
                                                    jjtree.openNodeScope(jjtn002);
                                                  }
                                                  try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte002) {
                                                    if (jjtc002) {
                                                      jjtree.clearNodeScope(jjtn002);
                                                      jjtc002 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte002 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte002;
                                                    }
                                                    if (jjte002 instanceof ParseException) {
                                                      throw (ParseException)jjte002;
                                                    }
                                                    throw (Error)jjte002;
                                                  } finally {
                                                    if (jjtc002) {
                                                      jjtree.closeNodeScope(jjtn002,  true);
                                                    }
                                                  }
/*@egen*/             [ LOOKAHEAD(2) <ELSE>/*@bgen(jjtree) #Else( true) */
                                                                                                {
                                                                                                  ASTElse jjtn003 = new ASTElse(JJTELSE);
                                                                                                  boolean jjtc003 = true;
                                                                                                  jjtree.openNodeScope(jjtn003);
                                                                                                }
                                                                                                try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                                                                                } catch (Throwable jjte003) {
                                                                                                  if (jjtc003) {
                                                                                                    jjtree.clearNodeScope(jjtn003);
                                                                                                    jjtc003 = false;
                                                                                                  } else {
                                                                                                    jjtree.popNode();
                                                                                                  }
                                                                                                  if (jjte003 instanceof RuntimeException) {
                                                                                                    throw (RuntimeException)jjte003;
                                                                                                  }
                                                                                                  if (jjte003 instanceof ParseException) {
                                                                                                    throw (ParseException)jjte003;
                                                                                                  }
                                                                                                  throw (Error)jjte003;
                                                                                                } finally {
                                                                                                  if (jjtc003) {
                                                                                                    jjtree.closeNodeScope(jjtn003,  true);
                                                                                                  }
                                                                                                }
/*@egen*/            ] )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void IterationStatement()           :
{/*@bgen(jjtree) #While(> 0) */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #While(> 0) */
        try {
/*@egen*/
	( <WHILE> "(" Expression()/*@bgen(jjtree) #Condition( 1) */
                                   {
                                     ASTCondition jjtn001 = new ASTCondition(JJTCONDITION);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  1);
                                     }
                                   }
/*@egen*/              /*@bgen(jjtree) #Do( true) */
                                                     {
                                                       ASTDo jjtn002 = new ASTDo(JJTDO);
                                                       boolean jjtc002 = true;
                                                       jjtree.openNodeScope(jjtn002);
                                                     }
                                                     try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte002) {
                                                       if (jjtc002) {
                                                         jjtree.clearNodeScope(jjtn002);
                                                         jjtc002 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte002 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte002;
                                                       }
                                                       if (jjte002 instanceof ParseException) {
                                                         throw (ParseException)jjte002;
                                                       }
                                                       throw (Error)jjte002;
                                                     } finally {
                                                       if (jjtc002) {
                                                         jjtree.closeNodeScope(jjtn002,  true);
                                                       }
                                                     }
/*@egen*/           )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
          }
        }
/*@egen*/ 
}

void JumpStatement()              :
{/*@bgen(jjtree) #Return( true) */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Return( true) */
        try {
/*@egen*/
	( <RETURN> [ Expression() ] ";" )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  true);
          }
        }
/*@egen*/
}

void Expression():
{}
{
	AssignmentExpression() ( ","/*@bgen(jjtree) #ListOfExpressions( 2) */
                                     {
                                       ASTListOfExpressions jjtn001 = new ASTListOfExpressions(JJTLISTOFEXPRESSIONS);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ AssignmentExpression()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
                                     }
/*@egen*/                       )*
}

void AssignmentExpression():
{}
{
	  LOOKAHEAD( AssignmentOperator()) AssignmentOperator() |
	  LOOKAHEAD(3) ConditionalExpression()
}

void AssignmentOperator():
{Token t;}
{
	UnaryExpression()
	( t = "=" AssignmentExpression()/*@bgen(jjtree) #AssignEqual( 2) */
                                         {
                                           ASTAssignEqual jjtn001 = new ASTAssignEqual(JJTASSIGNEQUAL);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                         }
                                         try {
/*@egen*//*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                           jjtc001 = false;
                                         }
/*@egen*/ { jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                           }
                                         }
/*@egen*/                
	| t = "*=" AssignmentExpression()/*@bgen(jjtree) #AssignMult( 2) */
                                          {
                                            ASTAssignMult jjtn002 = new ASTAssignMult(JJTASSIGNMULT);
                                            boolean jjtc002 = true;
                                            jjtree.openNodeScope(jjtn002);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                            jjtc002 = false;
                                          }
/*@egen*/ { jjtn002.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc002) {
                                              jjtree.closeNodeScope(jjtn002,  2);
                                            }
                                          }
/*@egen*/               	
	| t = "/=" AssignmentExpression()/*@bgen(jjtree) #AssignDiv( 2) */
                                          {
                                            ASTAssignDiv jjtn003 = new ASTAssignDiv(JJTASSIGNDIV);
                                            boolean jjtc003 = true;
                                            jjtree.openNodeScope(jjtn003);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn003,  2);
                                            jjtc003 = false;
                                          }
/*@egen*/ { jjtn003.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc003) {
                                              jjtree.closeNodeScope(jjtn003,  2);
                                            }
                                          }
/*@egen*/              
	| t = "%=" AssignmentExpression()/*@bgen(jjtree) #AssignRem( 2) */
                                          {
                                            ASTAssignRem jjtn004 = new ASTAssignRem(JJTASSIGNREM);
                                            boolean jjtc004 = true;
                                            jjtree.openNodeScope(jjtn004);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn004,  2);
                                            jjtc004 = false;
                                          }
/*@egen*/ { jjtn004.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc004) {
                                              jjtree.closeNodeScope(jjtn004,  2);
                                            }
                                          }
/*@egen*/              
	| t = "+=" AssignmentExpression()/*@bgen(jjtree) #AssignAdd( 2) */
                                          {
                                            ASTAssignAdd jjtn005 = new ASTAssignAdd(JJTASSIGNADD);
                                            boolean jjtc005 = true;
                                            jjtree.openNodeScope(jjtn005);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn005,  2);
                                            jjtc005 = false;
                                          }
/*@egen*/ { jjtn005.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc005) {
                                              jjtree.closeNodeScope(jjtn005,  2);
                                            }
                                          }
/*@egen*/              
	| t = "-=" AssignmentExpression()/*@bgen(jjtree) #AssignSub( 2) */
                                          {
                                            ASTAssignSub jjtn006 = new ASTAssignSub(JJTASSIGNSUB);
                                            boolean jjtc006 = true;
                                            jjtree.openNodeScope(jjtn006);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn006,  2);
                                            jjtc006 = false;
                                          }
/*@egen*/ { jjtn006.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc006) {
                                              jjtree.closeNodeScope(jjtn006,  2);
                                            }
                                          }
/*@egen*/              
	| t = "<<=" AssignmentExpression()/*@bgen(jjtree) #AssinShiftLeft( 2) */
                                           {
                                             ASTAssinShiftLeft jjtn007 = new ASTAssinShiftLeft(JJTASSINSHIFTLEFT);
                                             boolean jjtc007 = true;
                                             jjtree.openNodeScope(jjtn007);
                                           }
                                           try {
/*@egen*//*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn007,  2);
                                             jjtc007 = false;
                                           }
/*@egen*/ { jjtn007.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc007) {
                                               jjtree.closeNodeScope(jjtn007,  2);
                                             }
                                           }
/*@egen*/                   
	| t = ">>=" AssignmentExpression()/*@bgen(jjtree) #AssinShiftRight( 2) */
                                           {
                                             ASTAssinShiftRight jjtn008 = new ASTAssinShiftRight(JJTASSINSHIFTRIGHT);
                                             boolean jjtc008 = true;
                                             jjtree.openNodeScope(jjtn008);
                                           }
                                           try {
/*@egen*//*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn008,  2);
                                             jjtc008 = false;
                                           }
/*@egen*/ { jjtn008.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc008) {
                                               jjtree.closeNodeScope(jjtn008,  2);
                                             }
                                           }
/*@egen*/                    
	| t = "&=" AssignmentExpression()/*@bgen(jjtree) #AssinAnd( 2) */
                                          {
                                            ASTAssinAnd jjtn009 = new ASTAssinAnd(JJTASSINAND);
                                            boolean jjtc009 = true;
                                            jjtree.openNodeScope(jjtn009);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn009,  2);
                                            jjtc009 = false;
                                          }
/*@egen*/ { jjtn009.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc009) {
                                              jjtree.closeNodeScope(jjtn009,  2);
                                            }
                                          }
/*@egen*/             
	| t = "^=" AssignmentExpression()/*@bgen(jjtree) #AssignXOR( 2) */
                                          {
                                            ASTAssignXOR jjtn010 = new ASTAssignXOR(JJTASSIGNXOR);
                                            boolean jjtc010 = true;
                                            jjtree.openNodeScope(jjtn010);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn010,  2);
                                            jjtc010 = false;
                                          }
/*@egen*/ { jjtn010.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc010) {
                                              jjtree.closeNodeScope(jjtn010,  2);
                                            }
                                          }
/*@egen*/              
	| t = "|=" AssignmentExpression()/*@bgen(jjtree) #AssignOr( 2) */
                                          {
                                            ASTAssignOr jjtn011 = new ASTAssignOr(JJTASSIGNOR);
                                            boolean jjtc011 = true;
                                            jjtree.openNodeScope(jjtn011);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn011,  2);
                                            jjtc011 = false;
                                          }
/*@egen*/ { jjtn011.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc011) {
                                              jjtree.closeNodeScope(jjtn011,  2);
                                            }
                                          }
/*@egen*/             
	)
}

void ConditionalExpression():
{}
{
	LogicalORExpression() [/*@bgen(jjtree) #ConditionalExpression( 3) */
                                {
                                  ASTConditionalExpression jjtn003 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
                                  boolean jjtc003 = true;
                                  jjtree.openNodeScope(jjtn003);
                                }
                                try {
/*@egen*/ (/*@bgen(jjtree) #Then( 1) */
                                 {
                                   ASTThen jjtn001 = new ASTThen(JJTTHEN);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*/("?" Expression())/*@bgen(jjtree)*/
                                 } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte001;
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     throw (ParseException)jjte001;
                                   }
                                   throw (Error)jjte001;
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  1);
                                   }
                                 }
/*@egen*/         /*@bgen(jjtree) #Else( 1) */
                                                             {
                                                               ASTElse jjtn002 = new ASTElse(JJTELSE);
                                                               boolean jjtc002 = true;
                                                               jjtree.openNodeScope(jjtn002);
                                                             }
                                                             try {
/*@egen*/ (":" ConditionalExpression())/*@bgen(jjtree)*/
                                                             } catch (Throwable jjte002) {
                                                               if (jjtc002) {
                                                                 jjtree.clearNodeScope(jjtn002);
                                                                 jjtc002 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte002 instanceof RuntimeException) {
                                                                 throw (RuntimeException)jjte002;
                                                               }
                                                               if (jjte002 instanceof ParseException) {
                                                                 throw (ParseException)jjte002;
                                                               }
                                                               throw (Error)jjte002;
                                                             } finally {
                                                               if (jjtc002) {
                                                                 jjtree.closeNodeScope(jjtn002,  1);
                                                               }
                                                             }
/*@egen*/         )/*@bgen(jjtree)*/
                                } catch (Throwable jjte003) {
                                  if (jjtc003) {
                                    jjtree.clearNodeScope(jjtn003);
                                    jjtc003 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte003 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte003;
                                  }
                                  if (jjte003 instanceof ParseException) {
                                    throw (ParseException)jjte003;
                                  }
                                  throw (Error)jjte003;
                                } finally {
                                  if (jjtc003) {
                                    jjtree.closeNodeScope(jjtn003,  3);
                                  }
                                }
/*@egen*/                           ]
}

void ConstantExpression():
{}
{
	ConditionalExpression()
}

void LogicalORExpression():
{Token t;}
{
	LogicalANDExpression() [ ( t = "||" LogicalORExpression()/*@bgen(jjtree) #OR( 2) */
                                                                  {
                                                                    ASTOR jjtn001 = new ASTOR(JJTOR);
                                                                    boolean jjtc001 = true;
                                                                    jjtree.openNodeScope(jjtn001);
                                                                  }
                                                                  try {
/*@egen*//*@bgen(jjtree)*/
                                                                  {
                                                                    jjtree.closeNodeScope(jjtn001,  2);
                                                                    jjtc001 = false;
                                                                  }
/*@egen*/ {jjtn001.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                  } finally {
                                                                    if (jjtc001) {
                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                    }
                                                                  }
/*@egen*/        ) ]
}

void LogicalANDExpression():
{Token t;}
{
	InclusiveORExpression() [ ( t = "&&" LogicalANDExpression()/*@bgen(jjtree) #AND( 2) */
                                                                    {
                                                                      ASTAND jjtn001 = new ASTAND(JJTAND);
                                                                      boolean jjtc001 = true;
                                                                      jjtree.openNodeScope(jjtn001);
                                                                    }
                                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                                    {
                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                      jjtc001 = false;
                                                                    }
/*@egen*/ {jjtn001.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                    } finally {
                                                                      if (jjtc001) {
                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                      }
                                                                    }
/*@egen*/         ) ]
}

void InclusiveORExpression():
{Token t;}
{
	ExclusiveORExpression() [ ( t = "|" InclusiveORExpression()/*@bgen(jjtree) #BitOR( 2) */
                                                                     {
                                                                       ASTBitOR jjtn001 = new ASTBitOR(JJTBITOR);
                                                                       boolean jjtc001 = true;
                                                                       jjtree.openNodeScope(jjtn001);
                                                                     }
                                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                                       jjtc001 = false;
                                                                     }
/*@egen*/  {jjtn001.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                     } finally {
                                                                       if (jjtc001) {
                                                                         jjtree.closeNodeScope(jjtn001,  2);
                                                                       }
                                                                     }
/*@egen*/           ) ]
}

void ExclusiveORExpression():
{Token t;}
{
	ANDExpression() [ ( t = "^" ExclusiveORExpression()/*@bgen(jjtree) #XOR( 2) */
                                                            {
                                                              ASTXOR jjtn001 = new ASTXOR(JJTXOR);
                                                              boolean jjtc001 = true;
                                                              jjtree.openNodeScope(jjtn001);
                                                            }
                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn001,  2);
                                                              jjtc001 = false;
                                                            }
/*@egen*/ {jjtn001.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                            } finally {
                                                              if (jjtc001) {
                                                                jjtree.closeNodeScope(jjtn001,  2);
                                                              }
                                                            }
/*@egen*/         ) ]
}

void ANDExpression():
{Token t;}
{
	EqualityExpression() [ ( t = "&" ANDExpression()/*@bgen(jjtree) #BitAND( 2) */
                                                         {
                                                           ASTBitAND jjtn001 = new ASTBitAND(JJTBITAND);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
                                                         }
                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn001,  2);
                                                           jjtc001 = false;
                                                         }
/*@egen*/ {jjtn001.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                         } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001,  2);
                                                           }
                                                         }
/*@egen*/            ) ]
}

void EqualityExpression():
{Token t;}
{
	RelationalExpression() [ ( t = "==" EqualityExpression()/*@bgen(jjtree) #Equal( 2) */
                                                                 {
                                                                   ASTEqual jjtn001 = new ASTEqual(JJTEQUAL);
                                                                   boolean jjtc001 = true;
                                                                   jjtree.openNodeScope(jjtn001);
                                                                 }
                                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                                 {
                                                                   jjtree.closeNodeScope(jjtn001,  2);
                                                                   jjtc001 = false;
                                                                 }
/*@egen*/ {jjtn001.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                 } finally {
                                                                   if (jjtc001) {
                                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                                   }
                                                                 }
/*@egen*/            
							| t = "!=" EqualityExpression()/*@bgen(jjtree) #NotEqual( 2) */
                                                                                        {
                                                                                          ASTNotEqual jjtn002 = new ASTNotEqual(JJTNOTEQUAL);
                                                                                          boolean jjtc002 = true;
                                                                                          jjtree.openNodeScope(jjtn002);
                                                                                        }
                                                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                                                        {
                                                                                          jjtree.closeNodeScope(jjtn002,  2);
                                                                                          jjtc002 = false;
                                                                                        }
/*@egen*/ {jjtn002.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                                        } finally {
                                                                                          if (jjtc002) {
                                                                                            jjtree.closeNodeScope(jjtn002,  2);
                                                                                          }
                                                                                        }
/*@egen*/              )  ]
}

void RelationalExpression():
{Token t;}
{
	ShiftExpression() [ ( t = "<" RelationalExpression()/*@bgen(jjtree) #Less( 2) */
                                                             {
                                                               ASTLess jjtn001 = new ASTLess(JJTLESS);
                                                               boolean jjtc001 = true;
                                                               jjtree.openNodeScope(jjtn001);
                                                             }
                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                             {
                                                               jjtree.closeNodeScope(jjtn001,  2);
                                                               jjtc001 = false;
                                                             }
/*@egen*/ {jjtn001.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                             } finally {
                                                               if (jjtc001) {
                                                                 jjtree.closeNodeScope(jjtn001,  2);
                                                               }
                                                             }
/*@egen*/         
							| t = ">" RelationalExpression()/*@bgen(jjtree) #Greater( 2) */
                                                                                         {
                                                                                           ASTGreater jjtn002 = new ASTGreater(JJTGREATER);
                                                                                           boolean jjtc002 = true;
                                                                                           jjtree.openNodeScope(jjtn002);
                                                                                         }
                                                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                                                         {
                                                                                           jjtree.closeNodeScope(jjtn002,  2);
                                                                                           jjtc002 = false;
                                                                                         }
/*@egen*/ {jjtn002.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                                         } finally {
                                                                                           if (jjtc002) {
                                                                                             jjtree.closeNodeScope(jjtn002,  2);
                                                                                           }
                                                                                         }
/*@egen*/            
							| t = "<=" RelationalExpression()/*@bgen(jjtree) #LessOrEqual( 2) */
                                                                                          {
                                                                                            ASTLessOrEqual jjtn003 = new ASTLessOrEqual(JJTLESSOREQUAL);
                                                                                            boolean jjtc003 = true;
                                                                                            jjtree.openNodeScope(jjtn003);
                                                                                          }
                                                                                          try {
/*@egen*//*@bgen(jjtree)*/
                                                                                          {
                                                                                            jjtree.closeNodeScope(jjtn003,  2);
                                                                                            jjtc003 = false;
                                                                                          }
/*@egen*/ {jjtn003.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                                          } finally {
                                                                                            if (jjtc003) {
                                                                                              jjtree.closeNodeScope(jjtn003,  2);
                                                                                            }
                                                                                          }
/*@egen*/                
							| t = ">=" RelationalExpression()/*@bgen(jjtree) #GreaterOrEqual( 2) */
                                                                                          {
                                                                                            ASTGreaterOrEqual jjtn004 = new ASTGreaterOrEqual(JJTGREATEROREQUAL);
                                                                                            boolean jjtc004 = true;
                                                                                            jjtree.openNodeScope(jjtn004);
                                                                                          }
                                                                                          try {
/*@egen*//*@bgen(jjtree)*/
                                                                                          {
                                                                                            jjtree.closeNodeScope(jjtn004,  2);
                                                                                            jjtc004 = false;
                                                                                          }
/*@egen*/ {jjtn004.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                                          } finally {
                                                                                            if (jjtc004) {
                                                                                              jjtree.closeNodeScope(jjtn004,  2);
                                                                                            }
                                                                                          }
/*@egen*/                    ) ]
}

void ShiftExpression():
{Token t;}
{
	AdditiveExpression() [ ( t = "<<" ShiftExpression()/*@bgen(jjtree) #ShiftLeft( 2) */
                                                            {
                                                              ASTShiftLeft jjtn001 = new ASTShiftLeft(JJTSHIFTLEFT);
                                                              boolean jjtc001 = true;
                                                              jjtree.openNodeScope(jjtn001);
                                                            }
                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn001,  2);
                                                              jjtc001 = false;
                                                            }
/*@egen*/ {jjtn001.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                            } finally {
                                                              if (jjtc001) {
                                                                jjtree.closeNodeScope(jjtn001,  2);
                                                              }
                                                            }
/*@egen*/              
							| t = ">>" ShiftExpression()/*@bgen(jjtree) #ShiftRight( 2) */
                                                                                     {
                                                                                       ASTShiftRight jjtn002 = new ASTShiftRight(JJTSHIFTRIGHT);
                                                                                       boolean jjtc002 = true;
                                                                                       jjtree.openNodeScope(jjtn002);
                                                                                     }
                                                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                                                     {
                                                                                       jjtree.closeNodeScope(jjtn002,  2);
                                                                                       jjtc002 = false;
                                                                                     }
/*@egen*/ {jjtn002.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                                     } finally {
                                                                                       if (jjtc002) {
                                                                                         jjtree.closeNodeScope(jjtn002,  2);
                                                                                       }
                                                                                     }
/*@egen*/                ) ]
}

void AdditiveExpression():
{Token t;}
{
	MultiplicativeExpression() [ ( t = "+" AdditiveExpression()/*@bgen(jjtree) #Addition( 2) */
                                                                     {
                                                                       ASTAddition jjtn001 = new ASTAddition(JJTADDITION);
                                                                       boolean jjtc001 = true;
                                                                       jjtree.openNodeScope(jjtn001);
                                                                     }
                                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                                       jjtc001 = false;
                                                                     }
/*@egen*/  {jjtn001.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                     } finally {
                                                                       if (jjtc001) {
                                                                         jjtree.closeNodeScope(jjtn001,  2);
                                                                       }
                                                                     }
/*@egen*/              
								 | t = "-" AdditiveExpression()/*@bgen(jjtree) #Subtraction( 2) */
                                                                                                {
                                                                                                  ASTSubtraction jjtn002 = new ASTSubtraction(JJTSUBTRACTION);
                                                                                                  boolean jjtc002 = true;
                                                                                                  jjtree.openNodeScope(jjtn002);
                                                                                                }
                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                {
                                                                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                                                                  jjtc002 = false;
                                                                                                }
/*@egen*/ {jjtn002.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                                                } finally {
                                                                                                  if (jjtc002) {
                                                                                                    jjtree.closeNodeScope(jjtn002,  2);
                                                                                                  }
                                                                                                }
/*@egen*/                )  ]
}

void MultiplicativeExpression():
{Token t;}
{
	CastExpression() [ ( t = "*" MultiplicativeExpression()/*@bgen(jjtree) #Multiplication( 2) */
                                                                {
                                                                  ASTMultiplication jjtn001 = new ASTMultiplication(JJTMULTIPLICATION);
                                                                  boolean jjtc001 = true;
                                                                  jjtree.openNodeScope(jjtn001);
                                                                }
                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                                  jjtc001 = false;
                                                                }
/*@egen*/ {jjtn001.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc001) {
                                                                    jjtree.closeNodeScope(jjtn001,  2);
                                                                  }
                                                                }
/*@egen*/                    
						| t = "/" MultiplicativeExpression()/*@bgen(jjtree) #Divison( 2) */
                                                                                     {
                                                                                       ASTDivison jjtn002 = new ASTDivison(JJTDIVISON);
                                                                                       boolean jjtc002 = true;
                                                                                       jjtree.openNodeScope(jjtn002);
                                                                                     }
                                                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                                                     {
                                                                                       jjtree.closeNodeScope(jjtn002,  2);
                                                                                       jjtc002 = false;
                                                                                     }
/*@egen*/ {jjtn002.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                                     } finally {
                                                                                       if (jjtc002) {
                                                                                         jjtree.closeNodeScope(jjtn002,  2);
                                                                                       }
                                                                                     }
/*@egen*/             
						| t = "%" MultiplicativeExpression()/*@bgen(jjtree) #Remainder( 2) */
                                                                                     {
                                                                                       ASTRemainder jjtn003 = new ASTRemainder(JJTREMAINDER);
                                                                                       boolean jjtc003 = true;
                                                                                       jjtree.openNodeScope(jjtn003);
                                                                                     }
                                                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                                                     {
                                                                                       jjtree.closeNodeScope(jjtn003,  2);
                                                                                       jjtc003 = false;
                                                                                     }
/*@egen*/ {jjtn003.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                                                                                     } finally {
                                                                                       if (jjtc003) {
                                                                                         jjtree.closeNodeScope(jjtn003,  2);
                                                                                       }
                                                                                     }
/*@egen*/               )  ]
}

void CastExpression():
{}
{
	( LOOKAHEAD("(" TypeName() ")" CastExpression() ) "(" TypeName() ")"/*@bgen(jjtree) #Cast( 2) */
                                                                             {
                                                                               ASTCast jjtn001 = new ASTCast(JJTCAST);
                                                                               boolean jjtc001 = true;
                                                                               jjtree.openNodeScope(jjtn001);
                                                                             }
                                                                             try {
/*@egen*/ CastExpression()/*@bgen(jjtree)*/
                                                                             } catch (Throwable jjte001) {
                                                                               if (jjtc001) {
                                                                                 jjtree.clearNodeScope(jjtn001);
                                                                                 jjtc001 = false;
                                                                               } else {
                                                                                 jjtree.popNode();
                                                                               }
                                                                               if (jjte001 instanceof RuntimeException) {
                                                                                 throw (RuntimeException)jjte001;
                                                                               }
                                                                               if (jjte001 instanceof ParseException) {
                                                                                 throw (ParseException)jjte001;
                                                                               }
                                                                               throw (Error)jjte001;
                                                                             } finally {
                                                                               if (jjtc001) {
                                                                                 jjtree.closeNodeScope(jjtn001,  2);
                                                                               }
                                                                             }
/*@egen*/          | UnaryExpression() )
}

void UnaryExpression():
{Token t;}
{
	( LOOKAHEAD(3) PostfixExpression() |
	  t = "++" UnaryExpression()/*@bgen(jjtree) #PreIncrement( 1) */
                                     {
                                       ASTPreIncrement jjtn001 = new ASTPreIncrement(JJTPREINCREMENT);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001,  1);
                                       jjtc001 = false;
                                     }
/*@egen*/ { jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  1);
                                       }
                                     }
/*@egen*/                  |
	  t = "--" UnaryExpression()/*@bgen(jjtree) #PreDecrement( 1) */
                                     {
                                       ASTPreDecrement jjtn002 = new ASTPreDecrement(JJTPREDECREMENT);
                                       boolean jjtc002 = true;
                                       jjtree.openNodeScope(jjtn002);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn002,  1);
                                       jjtc002 = false;
                                     }
/*@egen*/ { jjtn002.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc002) {
                                         jjtree.closeNodeScope(jjtn002,  1);
                                       }
                                     }
/*@egen*/                  |/*@bgen(jjtree) #UnaryExpression( 1) */
          {
            ASTUnaryExpression jjtn003 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/
	  UnaryOperator()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  1);
            }
          }
/*@egen*/                    
	)
}

void UnaryOperator():
{Token t;}
{
	( t = "+" CastExpression()/*@bgen(jjtree) #Positive( 1) */
                                   {
                                     ASTPositive jjtn001 = new ASTPositive(JJTPOSITIVE);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn001,  1);
                                     jjtc001 = false;
                                   }
/*@egen*/ { jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  1);
                                     }
                                   }
/*@egen*/             
	| t = "-" CastExpression()/*@bgen(jjtree) #Negative( 1) */
                                   {
                                     ASTNegative jjtn002 = new ASTNegative(JJTNEGATIVE);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn002,  1);
                                     jjtc002 = false;
                                   }
/*@egen*/ { jjtn002.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002,  1);
                                     }
                                   }
/*@egen*/             
	| t = "~" CastExpression()/*@bgen(jjtree) #BitComplement( 1) */
                                   {
                                     ASTBitComplement jjtn003 = new ASTBitComplement(JJTBITCOMPLEMENT);
                                     boolean jjtc003 = true;
                                     jjtree.openNodeScope(jjtn003);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn003,  1);
                                     jjtc003 = false;
                                   }
/*@egen*/ { jjtn003.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc003) {
                                       jjtree.closeNodeScope(jjtn003,  1);
                                     }
                                   }
/*@egen*/                  
	| t = "!" CastExpression()/*@bgen(jjtree) #Not( 1) */
                                   {
                                     ASTNot jjtn004 = new ASTNot(JJTNOT);
                                     boolean jjtc004 = true;
                                     jjtree.openNodeScope(jjtn004);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn004,  1);
                                     jjtc004 = false;
                                   }
/*@egen*/ { jjtn004.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc004) {
                                       jjtree.closeNodeScope(jjtn004,  1);
                                     }
                                   }
/*@egen*/        
	)
}

void PostfixExpression():
{Token t;}
{
	PrimaryExpression() ( "["/*@bgen(jjtree) #Position( 1) */
                                  {
                                    ASTPosition jjtn001 = new ASTPosition(JJTPOSITION);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  1);
                                    }
                                  }
/*@egen*/             /*@bgen(jjtree) #ArrayAccess( 2) */
                                                            {
                                                              ASTArrayAccess jjtn002 = new ASTArrayAccess(JJTARRAYACCESS);
                                                              boolean jjtc002 = true;
                                                              jjtree.openNodeScope(jjtn002);
                                                            }
                                                            try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                                                            } finally {
                                                              if (jjtc002) {
                                                                jjtree.closeNodeScope(jjtn002,  2);
                                                              }
                                                            }
/*@egen*/                 |
	                      "("/*@bgen(jjtree) Arguments */
                                  {
                                    ASTArguments jjtn003 = new ASTArguments(JJTARGUMENTS);
                                    boolean jjtc003 = true;
                                    jjtree.openNodeScope(jjtn003);
                                  }
                                  try {
/*@egen*/ [ LOOKAHEAD(ArgumentExpressionList() ) ArgumentExpressionList()  ]/*@bgen(jjtree)*/
                                  } catch (Throwable jjte003) {
                                    if (jjtc003) {
                                      jjtree.clearNodeScope(jjtn003);
                                      jjtc003 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte003 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte003;
                                    }
                                    if (jjte003 instanceof ParseException) {
                                      throw (ParseException)jjte003;
                                    }
                                    throw (Error)jjte003;
                                  } finally {
                                    if (jjtc003) {
                                      jjtree.closeNodeScope(jjtn003, true);
                                    }
                                  }
/*@egen*/           /*@bgen(jjtree) #FunctionCall( 2) */
                                                                                                                {
                                                                                                                  ASTFunctionCall jjtn004 = new ASTFunctionCall(JJTFUNCTIONCALL);
                                                                                                                  boolean jjtc004 = true;
                                                                                                                  jjtree.openNodeScope(jjtn004);
                                                                                                                }
                                                                                                                try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                                                                                } finally {
                                                                                                                  if (jjtc004) {
                                                                                                                    jjtree.closeNodeScope(jjtn004,  2);
                                                                                                                  }
                                                                                                                }
/*@egen*/                 
						  | t = "." StructAttribute()/*@bgen(jjtree) #StructMember( 2) */
                                                                              {
                                                                                ASTStructMember jjtn005 = new ASTStructMember(JJTSTRUCTMEMBER);
                                                                                boolean jjtc005 = true;
                                                                                jjtree.openNodeScope(jjtn005);
                                                                              }
                                                                              try {
/*@egen*//*@bgen(jjtree)*/
                                                                              {
                                                                                jjtree.closeNodeScope(jjtn005,  2);
                                                                                jjtc005 = false;
                                                                              }
/*@egen*/ { jjtn005.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                                              } finally {
                                                                                if (jjtc005) {
                                                                                  jjtree.closeNodeScope(jjtn005,  2);
                                                                                }
                                                                              }
/*@egen*/                 
						  | t = "++"/*@bgen(jjtree) #PostIncrement( 1) */
                                                             {
                                                               ASTPostIncrement jjtn006 = new ASTPostIncrement(JJTPOSTINCREMENT);
                                                               boolean jjtc006 = true;
                                                               jjtree.openNodeScope(jjtn006);
                                                             }
                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                             {
                                                               jjtree.closeNodeScope(jjtn006,  1);
                                                               jjtc006 = false;
                                                             }
/*@egen*/ { jjtn006.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                             } finally {
                                                               if (jjtc006) {
                                                                 jjtree.closeNodeScope(jjtn006,  1);
                                                               }
                                                             }
/*@egen*/                  
						  | t = "--"/*@bgen(jjtree) #PostDecrement( 1) */
                                                             {
                                                               ASTPostDecrement jjtn007 = new ASTPostDecrement(JJTPOSTDECREMENT);
                                                               boolean jjtc007 = true;
                                                               jjtree.openNodeScope(jjtn007);
                                                             }
                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                             {
                                                               jjtree.closeNodeScope(jjtn007,  1);
                                                               jjtc007 = false;
                                                             }
/*@egen*/ { jjtn007.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                                             } finally {
                                                               if (jjtc007) {
                                                                 jjtree.closeNodeScope(jjtn007,  1);
                                                               }
                                                             }
/*@egen*/                   )*
}

void StructAttribute()        :
{/*@bgen(jjtree) Member */
 ASTMember jjtn000 = new ASTMember(JJTMEMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Member */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PrimaryExpression():
{Token t;}
{
	( t = <IDENTIFIER>/*@bgen(jjtree) Identifier */
                           {
                             ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                           }
/*@egen*/ { jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                             }
                           }
/*@egen*/             | Constant() | "(" Expression() ")" )
}

void ArgumentExpressionList():
{}
{
	(AssignmentExpression() ( "," AssignmentExpression() )*) 
}

void Constant():
{Token t;}
{
   t=<INTEGER_LITERAL>/*@bgen(jjtree) Int */
                       {
                         ASTInt jjtn001 = new ASTInt(JJTINT);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                       }
/*@egen*/ { jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
                       }
/*@egen*/     
 | t=<FLOATING_POINT_LITERAL>/*@bgen(jjtree) Float */
                              {
                                ASTFloat jjtn002 = new ASTFloat(JJTFLOAT);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn002, true);
                                jjtc002 = false;
                              }
/*@egen*/ { jjtn002.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002, true);
                                }
                              }
/*@egen*/       
 | t=<STRING_LITERAL>/*@bgen(jjtree) String */
                      {
                        ASTString jjtn003 = new ASTString(JJTSTRING);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                      }
/*@egen*/ { jjtn003.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, true);
                        }
                      }
/*@egen*/        
 //| t4=<CHARACTER_LITERAL> { jjtThis.jjtSetValue(t4.image); } #Char
}
